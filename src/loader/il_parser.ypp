/*
 * il_parser.y - parse Intermediate Language
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id: il_parser.y,v 1.9 2008/09/29 05:23:40 taisuke Exp $
 */

%language "c++"

%{
#include <cmath>
#include "syntax.hpp"
#include "element/element.h"
#include "il_lexer.hpp"

namespace c14 = slim::element;
namespace c17 = slim::element;
%}

%locations
%parse-param {il::lexer* scanner}
%parse-param {std::unique_ptr<IL> * ret_il}
%parse-param {std::unique_ptr<Rule> * ret_rule}
/* ローカルのルールセットIDからグローバルなIDへのテーブル */
%lex-param {il::lexer* scanner}

%define api.value.type variant
%token <long> INT
%token <double> FLOAT
%token <lmn_interned_str> ID SUBRULE_ID
%token <LmnInstruction> INST_NAME
%token <int> LABEL
%token <lmn_interned_str> DQUOTED_STRING
%token <lmn_interned_str> SQUOTED_STRING
%token <int> RULESET_ID
%token COMMA PERIOD COLON UNDERBAR LBRACE RBRACE LBRACKET RBRACKET
%token INSIDE_PROXY OUTSIDE_PROXY
%token KW_COMPILED_RULESET KW_COMPILED_SYSTEM_RULESET KW_COMPILED_UNIQ_RULE KW_COMPILED_RULE KW_ATOMMATCH KW_MEMMATCH KW_COMPILED_SUBRULE
%token KW_GUARD KW_BODY KW_INLINE KW_MODULE

%token <LmnInstruction> INST_TK_LOOP
%token <LmnInstruction> INST_TK_RUN
%token <LmnInstruction> INST_TK_NOT
%token <LmnInstruction> INST_TK_GROUP
%token <LmnInstruction> INST_TK_BRANCH

%token _EOF 0

%start start
%type <IL *> world
%type <InstBlock> atommatch
%type <InstBlock> body
%type <InstBlock> guard
%type <InstBlock> memmatch
%type <Instruction> instruction
%type <std::variant<Rule, Subrule>> rule
%type <RuleSet> ruleSet
%type <il::Functor> functor
%type <il::InstrArg> arg
%type <il::InstrArg> var_list_arg;
%type <int> label
%type <std::vector<Instruction>> instructions
%type <std::vector<Module>> module_def;
%type <std::vector<Module>> modules;
%type <std::vector<std::variant<Rule, Subrule>>> ruleList
%type <std::vector<RuleSet>> ruleSetList
%type <std::vector<il::InstrArg>> args
%type <std::vector<il::InstrArg>> args_
%type <std::vector<il::InstrArg>> inst_list_arg
%type <std::vector<il::InstrArg>> var_list;
%type <std::vector<il::InstrArg>> var_list_;
%type <std::vector<lmn_interned_str>> inlines;


%% /* Grammar rules and actions follow.  */

start:
  world _EOF { *ret_il = std::unique_ptr<IL>($1); }   /* 中間言語全体のパース */
| rule { *ret_rule = std::unique_ptr<Rule>(new Rule(std::get<Rule>($1))); }  /* ルールのみの入力をパース */
;

world:
  ruleSetList { $$ = new IL(std::move($1)); }
| ruleSetList module_def { $$ = new IL(std::move($1), std::move($2)); }
| ruleSetList module_def KW_INLINE inlines { $$ = new IL(std::move($1), std::move($2), std::move($4)); }
| ruleSetList KW_INLINE inlines { $$ = new IL(std::move($1), std::move($3)); }
;

module_def:
  KW_MODULE modules { $$ = std::move($2); }
;

modules:
  /*empty*/ { $$ = std::vector<Module>(); }
| modules SQUOTED_STRING LBRACE  RBRACE { $$ = std::move($1); } /* この場合もある */
| modules SQUOTED_STRING LBRACE RULESET_ID RBRACE {
  $1.emplace_back($2, $4);
  $$ = std::move($1);
}
;

inlines:
  /*empty*/ { $$ = std::vector<lmn_interned_str>(); }
| inlines DQUOTED_STRING { $1.push_back($2); $$ = std::move($1); }
;

ruleSetList:
  ruleSet { $$.push_back(std::move($1)); }
| ruleSetList ruleSet { $1.push_back(std::move($2)); $$ = std::move($1); }
;

ruleSet:
  KW_COMPILED_SYSTEM_RULESET RULESET_ID ruleList { $$ = RuleSet($2, std::move($3), TRUE); }
| KW_COMPILED_RULESET RULESET_ID ruleList { $$ = RuleSet($2, std::move($3), FALSE); }
;

ruleList:
  rule { $$.push_back($1); }
| ruleList rule { $1.push_back(std::move($2)); $$ = std::move($1); }
;

rule:
  KW_COMPILED_UNIQ_RULE atommatch memmatch guard body {
    $$ = Rule(true, std::move($2), std::move($3), std::move($4), std::move($5));
  }
| KW_COMPILED_RULE atommatch memmatch guard body {
    $$ = Rule(false, std::move($2), std::move($3), std::move($4), std::move($5));
  }
| KW_COMPILED_SUBRULE SUBRULE_ID instructions {
    $$ = Subrule($2, InstBlock(std::move($3)));
  }
;

atommatch:
  KW_ATOMMATCH COLON instructions { $$ = InstBlock(std::move($3)); }
;

memmatch:
  KW_MEMMATCH COLON instructions { $$ = InstBlock(std::move($3)); }
;

guard:
  /* empty */ { $$ = InstBlock(); }
| KW_GUARD COLON label COLON instructions { $$ = InstBlock($3, std::move($5)); }
;

body:
  /* empty */ { $$ = InstBlock(); }
| KW_BODY COLON label COLON instructions { $$ = InstBlock($3, std::move($5)); }
;

label:
  LABEL { $$ = $1; }
;

instructions:
  /* empty */ { $$ = std::vector<Instruction>(); }
| instructions instruction { $1.push_back(std::move($2)); $$ = std::move($1); }
;

instruction:
  INST_NAME LBRACKET args RBRACKET {
  if ($1 == INSTR_COMMIT) {
    /* COMMITの第二引数を変数番号ではなく行番号とする */
    auto &line_num_arg = std::get<il::instr_arg::var>($3.at(1));
    $3.at(1) = il::instr_arg::lineno(line_num_arg.value);
  }
  
  $$ = Instruction($1, std::move($3));
}
  /* 変数のリストと命令のリストがreduce/reduce コンフリクトを起こすので別に扱う */
| INST_TK_LOOP LBRACKET inst_list_arg RBRACKET { $$ = Instruction($1, std::move($3)); }
| INST_TK_RUN LBRACKET inst_list_arg RBRACKET { $$ = Instruction($1, std::move($3)); }
| INST_TK_NOT LBRACKET inst_list_arg RBRACKET { $$ = Instruction($1, std::move($3)); }
| INST_TK_GROUP LBRACKET inst_list_arg RBRACKET { $$ = Instruction($1, std::move($3)); }
| INST_TK_BRANCH LBRACKET inst_list_arg RBRACKET { $$ = Instruction($1, std::move($3)); }
;

arg:
  INT { $$ = il::instr_arg::var($1); }
| functor { $$ = il::instr_arg::functor(std::move($1)); }
| RULESET_ID { $$ = il::instr_arg::ruleset($1); }
| DQUOTED_STRING { $$ = il::instr_arg::string($1); }
| label { $$ = il::instr_arg::label($1); }
| var_list_arg { $$ = std::move($1); }
;

args:
  /* empty */ { $$ = std::vector<il::InstrArg>(); }
| args_ arg { $1.push_back(il::InstrArg(std::move($2))); $$ = std::move($1); }
;

args_:
  /* empty */ { $$ = std::vector<il::InstrArg>(); }
| args_ arg COMMA { $1.push_back(il::InstrArg(std::move($2))) ; $$ = std::move($1); }
;

var_list_arg:
  LBRACKET var_list RBRACKET { $$ = il::instr_arg::var_list(std::move($2)); }
;

var_list:
  /* empty */  { $$ = std::vector<il::InstrArg>(); }
| var_list_ INT { $1.push_back(il::instr_arg::var(std::move($2))); $$ = std::move($1); }
| var_list_ functor { $1.push_back(il::instr_arg::functor(std::move($2))); $$ = std::move($1); }
;

var_list_:
  /* empty */ { $$ = std::vector<il::InstrArg>(); }
| var_list_ INT COMMA { $1.push_back(il::instr_arg::var(std::move($2))); $$ = std::move($1); }
| var_list_ functor COMMA { $1.push_back(il::instr_arg::functor(std::move($2))); $$ = std::move($1); }
;

inst_list_arg:
  LBRACKET instructions RBRACKET {
    $$ = std::vector<il::InstrArg>();
    $$.push_back(il::instr_arg::inst_list(std::move($2)));
  }
;

functor:
  INSIDE_PROXY { $$ = il::functor::in_proxy(); }
| OUTSIDE_PROXY { $$ = il::functor::out_proxy(); }
| SQUOTED_STRING UNDERBAR INT { $$ = il::functor::symbol($1, $3); }
| DQUOTED_STRING UNDERBAR INT { $$ = il::functor::string($1); }
| SQUOTED_STRING PERIOD SQUOTED_STRING UNDERBAR INT {
    $$ = il::functor::symbol($1, $3, $5);
  }
| INT UNDERBAR INT {
    $$ = il::functor::integer((long)$1);
  }
| FLOAT UNDERBAR INT {
    $$ = il::functor::real($1);
  }
;

%%

#include <iostream>

/* Called by yyparse on error.  */
void il::parser::error (const il::parser::location_type &loc, std::string const &s)
{
  std::cerr << "il parser error: " << s << std::endl;
  exit(1);
}
