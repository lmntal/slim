/*
 * translate_generator.in -
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * $Id: translate_generator.in,v 1.5 2008/09/19 05:18:17 riki Exp $
 */

#__echo
 #include "translate.hpp"
 #include "syntax.hpp"
 #include "arch.h"
 #include "vm/vm.h"
 #include "element/element.h"
 #include "verifier/verifier.h"
 #include <stdio.h>

#__echo_t
# トランスレータ用の関数宣言
const BYTE *translate_instruction_generated(const BYTE *instr,
                                            Vector *jump_points,
                                            const char *header,
                                            const char *successcode,
                                            const char *failcode,
                                            int indent,
                                            int *finishflag)
{
  LmnInstrOp op;
  const BYTE * const op_address = instr;

  READ_VAL(LmnInstrOp, instr, op);
  *finishflag = 1;

  switch (op) {


#__echo_i
# インタプリタ用の関数宣言
 #include "so.h"
 #define TR_GFID(x) (x)
 #define TR_GSID(x) (x)
 #define TR_GRID(x) (x)

/* just for debug! */
static FILE *OUT = NULL;

BOOL interpret_generated(LmnReactCxtRef rc,
                         LmnRuleRef rule,
                         LmnRuleInstr instr)
{
  LmnInstrOp op;

  /* just for debug! */
  if(! OUT){
    /* out = stderr; */
    OUT = stdout;
    /* OUT = fopen("/dev/null", "w"); */
  }

  while (TRUE) {
  /* LOOP:; */
    READ_VAL(LmnInstrOp, instr, op);
    switch (op) {


#spec LmnInstrVar LmnInstrVar
  TR_INSTR_SPEC(rc, $1);

#insertconnectorsinnull LmnInstrVar $list
  {
    const Vector v = vec_const_temporary_from_array($1_num, $1);
    rc->reg($0) = {(LmnWord)Task::insertconnectors(rc, NULL, &v), 0, TT_OTHER};

#__echo_t
    {
      char *buf_always = automalloc_sprintf("goto label_always_%p", op_address);
      instr = translate_instructions(instr, jump_points, header, buf_always, buf_always, indent+1);
      free(buf_always);
    }
#__format_t
  label_always_$a:
    hashset_free((HashSet *)rc->wt($0));
    $s;
    lmn_fatal("translate recursive error\n");
#__format
  }
#__echo_t
  *finishflag = 0;

#insertconnectors LmnInstrVar $list LmnInstrVar
  {
    const Vector v = vec_const_temporary_from_array($1_num, $1);
    rc->reg($0) = {(LmnWord)Task::insertconnectors(rc, (LmnMembraneRef)rc->wt($2), &v), 0, TT_OTHER};
#__echo_t
    {
      char *buf_always = automalloc_sprintf("goto label_always_%p", op_address);
      instr = translate_instructions(instr, jump_points, header, buf_always, buf_always, indent+1);
      free(buf_always);
    }
#__format_t
  label_always_$a:
    hashset_free((HashSet *)rc->wt($0));
    $s;
    lmn_fatal("translate recursive error\n");
#__format
  }
#__echo_t
  *finishflag = 0;

#commit lmn_interned_str LmnLineNum
  {
    LmnMembraneRef ptmp_global_root;
    LmnRegisterArray v;
    unsigned int org_next_id;

    org_next_id = 0;
    tr_instr_commit_ready(rc, rule, TR_GSID($0), $1, &ptmp_global_root, &v, &org_next_id);
#__echo_t
    {
      char *buf_always = automalloc_sprintf("goto label_always_%p", op_address);
      instr = translate_instructions(instr, jump_points, header, buf_always, buf_always, indent+1);
      free(buf_always);

      /* 変換中についでにルール名も設定 */
      set_translating_rule_name(targ0);
    }
#__format_t
  label_always_$a:
    if(tr_instr_commit_finish(rc, rule, TR_GSID($0), $1, &ptmp_global_root, &v))
      $s;
    else
      env_set_next_id(org_next_id);
      $f;
    lmn_fatal("translate recursive error\n");
#__format
  }
#__echo_t
  *finishflag = 0;

#findatom LmnInstrVar LmnInstrVar $functor
% if (LMN_ATTR_IS_DATA(targ2_attr)) {
%   lmn_fatal("I can not find data atoms.");
% } else {
    {
      AtomListEntryRef atomlist_ent = ((LmnMembraneRef)rc->wt($1))->get_atomlist(TR_GFID($2_functor_data));
      LmnSymbolAtomRef atom;

      if (atomlist_ent) {
        rc->at($0) = LMN_ATTR_MAKE_LINK(0);
        /* EACH_ATOMを使うとループ内コード中でコンマが使えない場合が出てくる */
        for(atom = atomlist_head(atomlist_ent);
            atom != lmn_atomlist_end(atomlist_ent);
            atom = atom->get_next()){
          if(atom->get_functor() != LMN_RESUME_FUNCTOR){
            rc->wt($0) = (LmnWord)atom;
            rc->tt($0) = TT_ATOM;
#__echo_t
            {
              char *buf_fail = automalloc_sprintf("goto label_fail_%p", op_address);
              instr = translate_instructions(instr, jump_points, header, successcode, buf_fail, indent+1);
              free(buf_fail);
            }
#__format
          }
#__format_t
        label_fail_$a:
          ; /* PROFILEでない場合に必要 */
 #ifdef PROFILE
          if (lmn_env.profile_level >= 2) {

          }
 #endif
#__format
        }
      }
    }
    $f;
% }
#__echo_t
  *finishflag = 0;

#lockmem LmnInstrVar LmnInstrVar lmn_interned_str
  rc->reg($0) = {(LmnWord)LMN_PROXY_GET_MEM((LmnSymbolAtomRef)rc->wt($1)), 0, TT_MEM};
  if(((LmnMembraneRef)rc->wt($0))->NAME_ID() != TR_GSID($2)) $f;

#anymem LmnInstrVar LmnInstrVar LmnInstrVar lmn_interned_str
  {
    LmnMembraneRef mp = ((LmnMembraneRef)rc->wt($1))->mem_child_head();
    for (; mp; mp=mp->mem_next()) {
      rc->reg($0) = {(LmnWord)mp, 0, TT_MEM};
      if (mp->NAME_ID() == TR_GSID($3)){
#__echo_t
        {
          char *buf_fail = automalloc_sprintf("goto label_fail_%p", op_address);
          instr = translate_instructions(instr, jump_points, header, successcode, buf_fail, indent+1);
          free(buf_fail);
        }
#__format
      }
#__format_t
    label_fail_$a:
      ; /* PROFILEでない場合に必要 */
 #ifdef PROFILE
      if (lmn_env.profile_level >= 2) {

      }
 #endif
#__format
    }
    $f;
  }
#__echo_t
  *finishflag = 0;

#nmems LmnInstrVar LmnInstrVar
  if (!((LmnMembraneRef)rc->wt($0))->nmems($1)) $f;

#norules LmnInstrVar
  if (((LmnMembraneRef)rc->wt($0))->get_rulesets().size()) $f;

#newatom LmnInstrVar LmnInstrVar $functor
% switch(targ2_attr){
% case LMN_INT_ATTR:
    rc->wt($0) = $2_long_data;
%   break;
% case LMN_DBL_ATTR:
  {
    LmnAtomRef d;
    d = (LmnAtomRef)lmn_create_double_atom($2_double_data);
    rc->wt($0) = (LmnWord)d;
   }
%   break;
% case LMN_STRING_ATTR:
    rc->wt($0) = (LmnWord)new LmnString(lmn_id_to_name(TR_GSID($2_string_data)));
%   break;
% default:
    rc->wt($0) = (LmnWord)lmn_new_atom(TR_GFID($2_functor_data));
%   break;
% }
  rc->at($0) = $2_attr;
  rc->tt($0) = TT_ATOM;
  lmn_mem_push_atom((LmnMembraneRef)rc->wt($1), (LmnAtomRef)rc->wt($0), $2_attr);

#natoms LmnInstrVar LmnInstrVar
  if (!((LmnMembraneRef)rc->wt($0))->natoms($1)) $f;

#natomsindirect LmnInstrVar LmnInstrVar
  if (!((LmnMembraneRef)rc->wt($0))->natoms(rc->wt($1))) $f;

#alloclink LmnInstrVar LmnInstrVar LmnInstrVar
  TR_INSTR_ALLOCLINK(rc, $0, $1, $2);

#unifylinks LmnInstrVar LmnInstrVar LmnInstrVar
  TR_INSTR_UNIFYLINKS(rc, $0, $1, $2);

#newlink LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar
  lmn_mem_newlink((LmnMembraneRef)rc->wt($4), (LmnAtomRef)rc->wt($0), rc->at($0), $1, (LmnAtomRef)rc->wt($2), rc->at($2), $3);

#relink LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar
  TR_INSTR_RELINK(rc, $0, $1, $2, $3, $4);

#getlink LmnInstrVar LmnInstrVar LmnInstrVar
# /* リンク先の取得をせずにリンク元の情報を格納しておく。
#    リンク元が格納されていることを示すため最下位のビットを立てる */
  rc->reg($0) = {(LmnWord)((LmnSymbolAtomRef)rc->wt($1))->get_link($2), ((LmnSymbolAtomRef)rc->wt($1))->get_attr($2), TT_ATOM};

#unify LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar
  lmn_mem_unify_atom_args((LmnMembraneRef)rc->wt($4), (LmnSymbolAtomRef)(rc->wt($0)), $1, (LmnSymbolAtomRef)(rc->wt($2)), $3);

#proceed
  $s;
#__echo_t
  *finishflag = 0;

#stop
  $f;
#__echo_t
  *finishflag = 0;

#not LmnSubInstrSize
  { /* not */
#__echo_t
    {
      char *buf_success = automalloc_sprintf("goto label_success_%p", op_address);
      char *buf_fail = automalloc_sprintf("goto label_fail_%p", op_address);
      const BYTE *next = translate_instructions(instr, jump_points, header, buf_success, buf_fail, indent+1);
      LMN_ASSERT(next == instr+targ0);
      instr = next;
    }
#__format_t
  label_success_$a: /* not */
    $f;
  label_fail_$a: /* not */
    ;
#__format
  }

#enqueueatom LmnInstrVar

#dequeueatom LmnInstrVar

#newmem LmnInstrVar LmnInstrVar LmnInstrVar
  {
    LmnMembraneRef mp = new LmnMembrane();
    ((LmnMembraneRef)rc->wt($1))->add_child_mem(mp);
    rc->wt($0) = (LmnWord)mp;
    rc->tt($0) = TT_MEM;
    mp->set_active(TRUE);
    if (rc->has_mode(REACT_MEM_ORIENTED)) {
      ((MemReactContext *)rc)->memstack_push(mp);
    }
  }

#allocmem LmnInstrVar
  rc->wt($0) = (LmnWord)new LmnMembrane();
  rc->tt($0) = TT_MEM;

#removeatom LmnInstrVar LmnInstrVar
  lmn_mem_remove_atom((LmnMembraneRef)rc->wt($1), (LmnAtomRef)rc->wt($0), rc->at($0));

#freeatom LmnInstrVar
  lmn_free_atom((LmnAtomRef)rc->wt($0), rc->at($0));

#removemem LmnInstrVar LmnInstrVar
  ((LmnMembraneRef)rc->wt($1))->remove_mem((LmnMembraneRef)rc->wt($0));

#freemem LmnInstrVar
  delete (LmnMembraneRef)rc->wt($0);

#addmem LmnInstrVar LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->add_child_mem((LmnMembraneRef)rc->wt($1));

#enqueuemem LmnInstrVar
  if (rc->has_mode(REACT_MEM_ORIENTED)) {
    ((MemReactContext *)rc)->memstack_push((LmnMembraneRef)rc->wt($0)); /* 通常実行時 */
  }

#unlockmem LmnInstrVar

#loadruleset LmnInstrVar LmnRulesetId
  lmn_mem_add_ruleset((LmnMembraneRef)rc->wt($0), LmnRuleSetTable::at(TR_GRID($1)));

#loadmodule LmnInstrVar lmn_interned_str
  {
    LmnRuleSetRef ruleset;
    if ((ruleset = lmn_get_module_ruleset(TR_GSID($1)))) {
#     /* テーブル内にルールセットがある場合 */
      lmn_mem_add_ruleset((LmnMembraneRef)rc->wt($0), ruleset);
    } else {
#     /* テーブル内にルールセットがない場合 */
      fprintf(stderr, "Undefined module %s\n", lmn_id_to_name(TR_GSID($1)));
    }
  }

#recursivelock LmnInstrVar

#recursiveunlock LmnInstrVar

#derefatom LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)((LmnSymbolAtomRef)rc->wt($1))->get_link($2), ((LmnSymbolAtomRef)rc->wt($1))->get_attr($2), TT_ATOM};

#deref LmnInstrVar LmnInstrVar LmnInstrVar LmnInstrVar
  {
    LmnByte attr = ((LmnSymbolAtomRef)rc->wt($1))->get_attr($2);
    if (LMN_ATTR_IS_DATA(attr)) {
      if ($3 != 0) $f;
    } else {
      if (attr != $3) $f;
    }
    rc->reg($0) = {(LmnWord)((LmnSymbolAtomRef)rc->wt($1))->get_link($2), attr, TT_ATOM};
  }

#func LmnInstrVar $functor
% if (LMN_ATTR_IS_DATA(targ1_attr)) {
    if (LMN_ATTR_IS_DATA(rc->at($0)) && rc->at($0) == $1_attr) {
      rc->tt($0) = TT_ATOM;
%     switch(targ1_attr) {
%     case LMN_INT_ATTR:
        if (rc->wt($0) != $1_long_data) $f;
%       break;
%     case LMN_DBL_ATTR:
        if (lmn_get_double(rc->wt($0)) != $1_double_data) $f;
%       break;
%     case LMN_STRING_ATTR: {
        LmnStringRef s = new LmnString(lmn_id_to_name(TR_GSID($1_string_data)));
        if( *s != *(LmnStringRef)rc->wt($0)) $f;
        delete (s);
%       fprintf(stderr, "string attr is not implemented.");
%       break;
%     }
%     default:
%       lmn_fatal("implementation error");
%     }
    } else {
      $f;
    }
% } else {
    if(LMN_ATTR_IS_DATA(rc->at($0)) ||
       ((LmnSymbolAtomRef)(rc->wt($0)))->get_functor() != TR_GFID($1_functor_data)) $f;
% }

#notfunc LmnInstrVar $functor
% if (LMN_ATTR_IS_DATA(targ1_attr)) {
    if(! (LMN_ATTR_IS_DATA(rc->at($0)) && rc->at($0) == $1_attr)){
      rc->tt($0) = TT_ATOM;
%     switch(targ1_attr){
%     case LMN_INT_ATTR:
        if(rc->wt($0) == $1_long_data) $f;
%       break;
%     case LMN_DBL_ATTR:
        if(lmn_get_double(rc->wt($0)) == $1_double_data) $f;
%       fprintf(stderr, "double attr is not implemented.");
%       break;
%     case LMN_STRING_ATTR: {
        LmnStringRef s = new LmnString(lmn_id_to_name(TR_GSID($1_string_data)));
        if(*s == *(LmnStringRef)rc->wt($0)) $f;
        delete (s);
%       fprintf(stderr, "string attr is not implemented.");
%       break;
%     }
%     default:
%       lmn_fatal("implementation error");
%     }
    }
% } else {
    if(! (LMN_ATTR_IS_DATA(rc->at($0)) ||
          ((LmnSymbolAtomRef)(rc->wt($0)))->get_functor() != TR_GFID($1_functor_data))) $f;
% }

#isground LmnInstrVar LmnInstrVar LmnInstrVar
  {
    Vector *srcvec;
    Vector *avovec;
    unsigned long natoms;
    BOOL b;

    avovec = Task::links_from_idxs((Vector *)rc->wt($2), rc);
    srcvec = Task::links_from_idxs((Vector *)rc->wt($1), rc);
    b = lmn_mem_is_ground(srcvec, avovec, &natoms);

    Task::free_links(srcvec);
    Task::free_links(avovec);

    if(! b) $f;
    rc->reg($0) = {natoms, LMN_INT_ATTR, TT_OTHER};
  }

#isunary LmnInstrVar
  if (LMN_ATTR_IS_DATA(rc->at($0))) {
    switch (rc->at($0)) {
    case LMN_SP_ATOM_ATTR:
#     /* スペシャルアトムはgroundの結果をunaryの結果とする */
      if (!SP_ATOM_IS_GROUND(rc->wt($0))) $f;
      break;
    default:
      break;
    }
  } else if (((LmnSymbolAtomRef)rc->wt($0))->get_arity() != 1){
    $f;
  }



#isint LmnInstrVar
  if(rc->at($0) != LMN_INT_ATTR) $f;

#isfloat LmnInstrVar
  if(rc->at($0) != LMN_DBL_ATTR) $f;

#isstring  LmnInstrVar
  if(! lmn_is_string((LmnSymbolAtomRef)rc->wt($0), rc->at($0))) $f;

#isintfunc LmnInstrVar
  if(rc->at($0) != LMN_INT_ATTR) $f;

#isfloatfunc LmnInstrVar
  if(rc->at($0) != LMN_DBL_ATTR) $f;

#copyatom LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)lmn_copy_atom((LmnSymbolAtomRef)rc->wt($2), rc->at($2)), rc->at($2), TT_ATOM};
  lmn_mem_push_atom((LmnMembraneRef)rc->wt($1), (LmnAtomRef)rc->wt($0), rc->at($0));

#eqatom LmnInstrVar LmnInstrVar
  if (LMN_ATTR_IS_DATA(rc->at($0)) ||
      LMN_ATTR_IS_DATA(rc->at($1)) ||
      LMN_SATOM(rc->wt($0)) != LMN_SATOM(rc->wt($1))) $f;

#neqatom LmnInstrVar LmnInstrVar
  if (!(LMN_ATTR_IS_DATA(rc->at($0)) ||
        LMN_ATTR_IS_DATA(rc->at($1)) ||
        LMN_SATOM(rc->wt($0)) != LMN_SATOM(rc->wt($1)))) $f;

#eqmem LmnInstrVar LmnInstrVar
  if(rc->wt($0) != rc->wt($1)) $f;

#neqmem LmnInstrVar LmnInstrVar
  if(rc->wt($0) == rc->wt($1)) $f;

#newlist LmnInstrVar
  {
    Vector *listvec = new Vector(16);
    rc->reg($0) = {(LmnWord)listvec, 0, TT_OTHER};
#__echo_t
    {
      char *buf_success = automalloc_sprintf("goto label_success_%p", op_address);
      char *buf_fail = automalloc_sprintf("goto label_fail_%p", op_address);
      instr = translate_instructions(instr, jump_points, header, buf_success, buf_fail, indent+1);
      free(buf_success);
      free(buf_fail);
    }
#__format_t
  label_success_$a:
    delete listvec;
    $s;
    lmn_fatal("translate recursive error\n");
  label_fail_$a:
    delete listvec;
    $f;
    lmn_fatal("translate recursive error\n");
#__format
  }
#__echo_t
  *finishflag = 0;

#addtolist LmnInstrVar LmnInstrVar
  ((Vector *)rc->wt($0))->push($1);

#getfromlist LmnInstrVar LmnInstrVar LmnInstrVar
  switch (rc->at($1)) {
    case LIST_AND_MAP:
      rc->wt($0) = ((Vector *)rc->wt($1))->get((unsigned int)$2);
      rc->tt($0) = TT_OTHER;
      if ($2 == 0){
        rc->at($0) = LINK_LIST;
      }else if ($2 == 1){
        rc->at($0) = MAP;
      }else{
        lmn_fatal("unexpected attribute @instr_getfromlist");
      }
      break;
    case LINK_LIST: /* LinkObjをfreeするのはここ？ */
    {
      LinkObjRef lo = (LinkObjRef)((Vector *)rc->wt($1))->get((unsigned int)$2);
      rc->reg($0) = {(LmnWord)LinkObjGetAtom(lo), LinkObjGetPos(lo), TT_ATOM};
      break;
    }
  }

#eqground LmnInstrVar LmnInstrVar
  {
    Vector *srcvec = Task::links_from_idxs((Vector*)rc->wt($0), rc);
    Vector *dstvec = Task::links_from_idxs((Vector*)rc->wt($1), rc);
    BOOL same = lmn_mem_cmp_ground(srcvec, dstvec);
    Task::free_links(srcvec);
    Task::free_links(dstvec);
    if(! same) $f;
  }

#neqground LmnInstrVar LmnInstrVar
  {
    Vector *srcvec = Task::links_from_idxs((Vector*)rc->wt($0), rc);
    Vector *dstvec = Task::links_from_idxs((Vector*)rc->wt($1), rc);
    BOOL same = lmn_mem_cmp_ground(srcvec, dstvec);
    Task::free_links(srcvec);
    Task::free_links(dstvec);
    if(same) $f;
  }

#copyground LmnInstrVar LmnInstrVar LmnInstrVar
  {
    Vector *srcvec = Task::links_from_idxs((Vector*)rc->wt($1), rc);
    Vector *dstlovec, *retvec;
    ProcessTableRef atommap;

    lmn_mem_copy_ground((LmnMembraneRef)rc->wt($2), srcvec, &dstlovec, &atommap,
                        NULL, NULL, NULL, NULL);
    Task::free_links(srcvec);

    /* 返り値の作成 */
    retvec = new Vector(2);
    retvec->push((LmnWord)dstlovec);
    retvec->push((LmnWord)atommap);
    rc->reg($0) = {(LmnWord)retvec, LIST_AND_MAP, TT_OTHER};
#__echo_t
    {
      char *buf_always = automalloc_sprintf("goto label_always_%p", op_address);
      instr = translate_instructions(instr, jump_points, header, buf_always, buf_always, indent+1);
      free(buf_always);
    }
#__format_t
  label_always_$a:
    Task::free_links(dstlovec);
    delete retvec;
    $s;
    lmn_fatal("translate recursive error\n");
#__format
  }
#__echo_t
  *finishflag = 0;

#removeground LmnInstrVar LmnInstrVar
  {
    Vector *srcvec = Task::links_from_idxs((Vector*)rc->wt($0), rc);
    ((LmnMembraneRef)rc->wt($1))->remove_ground(srcvec);
    Task::free_links(srcvec);
  }

#freeground LmnInstrVar
  {
    Vector *srcvec = Task::links_from_idxs((Vector*)rc->wt($0), rc);
    lmn_mem_free_ground(srcvec);
    Task::free_links(srcvec);
  }

#stable LmnInstrVar
  if (((LmnMembraneRef)rc->wt($0))->is_active()) $f;

#iadd LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) + (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#isub LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) - (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#imul LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) * (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#idiv LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) / (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#ineg LmnInstrVar LmnInstrVar
  rc->reg($0) = {-(LmnWord)rc->wt($1), LMN_INT_ATTR, TT_ATOM};

#imod LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) % (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#inot LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {~(LmnWord)rc->wt($1), LMN_INT_ATTR, TT_ATOM};

#iand LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) & (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#ior LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) | (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#ixor LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {(LmnWord)rc->wt($1) ^ (LmnWord)rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#ilt LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) < rc->wt($1))) $f;

#ile LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) <= rc->wt($1))) $f;

#igt LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) > rc->wt($1))) $f;

#ige LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) >= rc->wt($1))) $f;

#ieq LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) == rc->wt($1))) $f;

#ine LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) != rc->wt($1))) $f;

#iltfunc LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) < rc->wt($1))) $f;

#ilefunc LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) <= rc->wt($1))) $f;

#igtfunc LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) > rc->wt($1))) $f;

#igefunc LmnInstrVar LmnInstrVar
  if(!(rc->wt($0) >= rc->wt($1))) $f;

#fadd LmnInstrVar LmnInstrVar LmnInstrVar
  LmnDataAtomRef d = (LmnDataAtomRef)lmn_create_double_atom(lmn_get_double(rc->wt($1)) + lmn_get_double(rc->wt($2)));
  rc->reg($0) = {(LmnWord)d, LMN_DBL_ATTR, TT_ATOM};

#fsub LmnInstrVar LmnInstrVar LmnInstrVar
  LmnDataAtomRef d = (LmnDataAtomRef)lmn_create_double_atom(lmn_get_double(rc->wt($1)) - lmn_get_double(rc->wt($2)));
  rc->reg($0) = {(LmnWord)d, LMN_DBL_ATTR, TT_ATOM};

#fmul LmnInstrVar LmnInstrVar LmnInstrVar
  LmnDataAtomRef d = (LmnDataAtomRef)lmn_create_double_atom(lmn_get_double(rc->wt($1)) * lmn_get_double(rc->wt($2)));
  rc->reg($0) = {(LmnWord)d, LMN_DBL_ATTR, TT_ATOM};

#fdiv LmnInstrVar LmnInstrVar LmnInstrVar
  LmnDataAtomRef d = (LmnDataAtomRef)lmn_create_double_atom(lmn_get_double(rc->wt($1)) / lmn_get_double(rc->wt($2)));
  rc->reg($0) = {(LmnWord)d, LMN_DBL_ATTR, TT_ATOM};

#fneg LmnInstrVar LmnInstrVar
  LmnDataAtomRef d = (LmnDataAtomRef)lmn_create_double_atom(-lmn_get_double(rc->wt($1)));
  rc->reg($0) = {(LmnWord)d, LMN_DBL_ATTR, TT_ATOM};

#flt LmnInstrVar LmnInstrVar
  if(!(lmn_get_double((LmnDataAtomRef)rc->wt($0)) < lmn_get_double((LmnDataAtomRef)rc->wt($1)))) $f;

#fle LmnInstrVar LmnInstrVar
  if(!(lmn_get_double((LmnDataAtomRef)rc->wt($0)) <= lmn_get_double((LmnDataAtomRef)rc->wt($1)))) $f;

#fgt LmnInstrVar LmnInstrVar
  if(!(lmn_get_double((LmnDataAtomRef)rc->wt($0)) > lmn_get_double((LmnDataAtomRef)rc->wt($1)))) $f;

#fge LmnInstrVar LmnInstrVar
  if(!(lmn_get_double((LmnDataAtomRef)rc->wt($0)) >= lmn_get_double((LmnDataAtomRef)rc->wt($1)))) $f;

#feq LmnInstrVar LmnInstrVar
  if(!(lmn_get_double((LmnDataAtomRef)rc->wt($0)) == lmn_get_double((LmnDataAtomRef)rc->wt($1)))) $f;

#fne LmnInstrVar LmnInstrVar
  if(!(lmn_get_double((LmnDataAtomRef)rc->wt($0)) != lmn_get_double((LmnDataAtomRef)rc->wt($1)))) $f;

#allocatom LmnInstrVar $functor
% switch(targ1_attr){
% case LMN_INT_ATTR:
    rc->reg($0) = {static_cast<LmnWord>($1_long_data), LMN_INT_ATTR, TT_ATOM};
%   break;
% case LMN_DBL_ATTR:
    {
#__format_t
      static const double d = $1_double_data;
      rc->reg($0) = {&d, LMN_CONST_DBL_ATTR, TT_ATOM};
#__format_i
  /* 困った */
#__format
    }
%   break;
% case LMN_STRING_ATTR:
    rc->reg($0) = {$1_string_data, LMN_CONST_STR_ATTR, TT_ATOM};
%   break;
% default:
%   lmn_fatal("Implementation error");
% }

#allocatomindirect LmnInstrVar LmnFunctor
  if (LMN_ATTR_IS_DATA(rc->at($1))) {
    rc->reg($0) = {(LmnWord)lmn_copy_data_atom(rc->wt($1), rc->at($1)), rc->at($1), TT_ATOM};
  } else { /* symbol atom */
    fprintf(stderr, "symbol atom can't be created in GUARD\n");
    exit(EXIT_FAILURE);
  }

#samefunc LmnInstrVar LmnInstrVar
  if (!lmn_eq_func((LmnAtomRef)rc->wt($0), rc->at($0), (LmnAtomRef)rc->wt($1), rc->at($1))) $f;

#getfunc LmnInstrVar LmnInstrVar
  if(LMN_ATTR_IS_DATA(rc->at($1))){
    rc->wt($0) = (LmnWord)rc->wt($1);
  }else{
    rc->wt($0) = ((LmnSymbolAtomRef)rc->wt($1))->get_functor();
  }
  rc->at($0) = rc->at($1);
  rc->tt($0) = TT_OTHER;

#setmemname LmnInstrVar lmn_interned_str
  ((LmnMembraneRef)rc->wt($0))->set_name(TR_GSID($1));

#copyrules LmnInstrVar LmnInstrVar
  TR_INSTR_COPYRULES(rc, $0, $1);

#removeproxies LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->remove_proxies();

#insertproxies LmnInstrVar LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->insert_proxies((LmnMembraneRef)rc->wt($1));

#deleteconnectors LmnInstrVar LmnInstrVar
  TR_INSTR_DELETECONNECTORS($0, $1);

#removetoplevelproxies LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->remove_toplevel_proxies();

#dereffunc LmnInstrVar LmnInstrVar LmnInstrVar
  TR_INSTR_DEREFFUNC(rc, $0, $1, $2);

#loadfunc LmnInstrVar $functor
% if(LMN_ATTR_IS_DATA(targ1_attr)){
%   switch(targ1_attr){
%   case LMN_INT_ATTR:
      rc->wt($0) = $1_long_data;
      rc->at($0) = LMN_INT_ATTR;
%     break;
%   case LMN_DBL_ATTR:
      {
#__format_t
        const static double x = $1_double_data;
        rc->wt($0) = &x;
        rc->at($0) = LMN_CONST_DBL_ATTR;
#__format_i
  /* 困った */
#__format
      }
%     break;
%   case LMN_STRING_ATTR:
      rc->wt($0) = $1_string_data;
      rc->at($0) = LMN_CONST_STR_ATTR;
%     break;
%   default:
%     lmn_fatal("Implementation error");
%   }
% }else{
    rc->wt($0) = $1_functor_data;
    rc->at($0) = $1_attr;
% }
  rc->tt($0) = TT_OTHER;

#eqfunc LmnInstrVar LmnInstrVar
  if (rc->at($0) != rc->at($1)) $f;
  switch (rc->at($0)) {
  case LMN_INT_ATTR:
    if ((long)rc->wt($0) != (long)rc->wt($1)) $f;
    break;
  case LMN_DBL_ATTR:
    if (lmn_get_double(rc->wt($0)) !=
        lmn_get_double(rc->wt($1))) $f;
    break;
  default:
    if (rc->wt($0) != rc->wt($1)) $f;
    break;
  }

#neqfunc LmnInstrVar LmnInstrVar
  if (rc->at($0) == rc->at($1)) {
    switch (rc->at($0)) {
    case LMN_INT_ATTR:
      if ((long)rc->wt($0) == (long)rc->wt($1)) $f;
      break;
    case LMN_DBL_ATTR:
      if (lmn_get_double(rc->wt($0)) ==
          lmn_get_double(rc->wt($1))) $f;
      break;
    default:
      if (rc->wt($0) == rc->wt($1)) $f;
      break;
    }
  }

#addatom LmnInstrVar LmnInstrVar
  lmn_mem_push_atom((LmnMembraneRef)rc->wt($0), (LmnAtomRef)rc->wt($1), rc->at($1));

#movecells LmnInstrVar LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->move_cells((LmnMembraneRef)rc->wt($1));

#removetemporaryproxies LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->remove_temporary_proxies();

#nfreelinks LmnInstrVar LmnInstrVar
  if (!((LmnMembraneRef)rc->wt($0))->nfreelinks($1)) $f;

#copycells LmnInstrVar LmnInstrVar LmnInstrVar
  rc->wt($0) = (LmnWord)lmn_mem_copy_cells((LmnMembraneRef)rc->wt($1), (LmnMembraneRef)rc->wt($2));
  rc->tt($0) = TT_OTHER;

#lookuplink LmnInstrVar LmnInstrVar LmnInstrVar
  TR_INSTR_LOOKUPLINK(rc, $0, $1, $2);

#clearrules LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->clearrules();

#dropmem LmnInstrVar
  ((LmnMembraneRef)rc->wt($0))->drop();

#testmem LmnInstrVar LmnInstrVar
  if (LMN_PROXY_GET_MEM((LmnSymbolAtomRef)rc->wt($1)) != (LmnMembraneRef)rc->wt($0)) $f;

#iaddfunc LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {rc->wt($1) + rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#isubfunc LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {rc->wt($1) - rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#imulfunc LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {rc->wt($1) * rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#idivfunc LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {rc->wt($1) / rc->wt($2), LMN_INT_ATTR, TT_ATOM};

#imodfunc LmnInstrVar LmnInstrVar LmnInstrVar
  rc->reg($0) = {rc->wt($1) % rc->wt($2), LMN_INT_ATTR, TT_ATOM};


#__end


#__echo_t
# トランスレータ用関数の最後
  default:
    *finishflag = -1;
    return instr;
  }
}


#__echo_i
# インタプリタ用関数の最後
    default:
      fprintf(stderr, "interpret_generated: Unknown operation %d\n", op);
      exit(1);
    }
  }
}
