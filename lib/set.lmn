/*
 * set.lmn - Set module
 *
 *   Copyright (c) 2017, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */



/*
NAME
        Set module

SYNOPSIS
        
AUTHOR
        Yutaro Tsunekawa

HISTORY
        2017/05/03(Wed)
*/

{
  module(set).

  Ret = set.init :- Ret = set_empty.

  set.free(Set) :- class(Set, "set") |
      '$callback'('cb_set_free', Set).
  set.free(set_empty) :- .

  Ret = set.insert(Set, Val) :- class(Set, "set") |
      '$callback'('cb_set_insert', Set, Val, Ret).
  Ret = set.insert(set_empty, Val) :-
      '$callback'('cb_set_insert', set_empty, Val, Ret).


  Ret = set.find(set_empty, Val, Res) :- ground(Val) | Ret = set_empty, Res = none.

  Ret = set.find(set_empty, {$v[]}, Res) :- | Ret = set_empty, Res = none.

  Ret = set.find(Set, Val, Res) :- class(Set, "set") |
      '$callback'('cb_set_find', Set, Val, Res, Ret).

  Ret = set.to_list(set_empty) :- Ret = [].

  Ret = set.to_list(Set) :- class(Set, "set") |
      '$callback'('cb_set_to_list', Set, Ret).

  Ret = set.copy(set_empty, S) :- Ret = set_empty, S = set_empty.

  Ret = set.copy(S0, S1) :- class(S0, "set") |
      '$callback'('cb_set_copy', S0, S1, Ret).

  Ret = set.erase(Set, Val) :- class(Set, "set") |
      '$callback'('cb_set_erase', Set, Val, Ret).

  Ret = set.erase(set_empty, $v) :- unary($v) |
      Ret = set_empty.

  Ret = set.union(Set0, Set1) :- class(Set0, "set"), class(Set1, "set") |
      '$callback'('cb_set_union', Set0, Set1, Ret).

  Ret = set.union(Set, set_empty) :- Ret = Set.

  Ret = set.union(set_empty, Set) :- Ret = Set.

  Ret = set.intersect(Set0, Set1) :- class(Set0, "set"), class(Set1, "set") |
      '$callback'('cb_set_intersect', Set0, Set1, Ret).

  Ret = set.intersect(Set, set_empty) :- Ret = set_empty, free(Set).

  Ret = set.intersect(set_empty, Set) :- Ret = set_empty, free(Set).

  Ret = set.diff(set_empty, set_empty) :-
      Ret = set_empty.

  Ret = set.diff(set_empty, S1) :- class(S1, "set") |
      Ret = set_empty.

  Ret = set.diff(S0, set_empty) :- class(S0, "set") |
      Ret = S0.

  Ret = set.diff(S0, S1) :- class(S0, "set"), class(S1, "set") |
      '$callback'('cb_set_diff', S0, S1, Ret).
}
