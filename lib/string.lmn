/**
NAME
	String module

SYNOPSIS

AUTHOR
	Koji Hara, Shintaro Kudo, Kazunori Ueda

HISTORY
	2004/05/31(Mon)
		replace
	2004/05/12(Wed)
		split join concat
	.. 2006/01/12(Thu)
		substring str_of_int int_of_str str_of_float float_of_str
	2006/07/02(Sun)
		length, reverse (by inui)
	2006/07/25(Tue)
		string.join に空リストが渡されたら空文字列を返すようにした by inui
        2015-07-24(Fri)
                some functions moved from str module
                added compress and explode
        2019-05-19(Sun)
	        moved times and join from str
*/

{
module(string).

/**
 * string.from(+Atom, -Res):
 * 
 * アトム（のファンクタ）の文字列を得る
 * @param +Atom アトム
 * @example H=string.from(-123)  ==>  H="-123"
 */

H = string.from(X) :- unary(X) | '$callback'('string_make', X, H).

/**
 * string.concat(+Str1, +Str2, -Res):
 * 
 * 文字列を結合する。
 * @param +Str1,+Str2 文字列
 * @example H='^'("abc", "de")  ==>  H="abcde"
 */
H = string.concat(S1, S2) :- string(S1), string(S2) |
    '$callback'('string_concat', S1, S2, H).

/**
 * string.substr(+Str, +Begin, -Res):
 * 
 * 文字列の指定された開始位置から始まり終端までの部分文字列を返す
 * @param +Str 元の文字列
 * @param +Begin 開始位置
 * @param -Res 結果(エラー時は空文字列)
 * @example H=string.substr("abc", 1) ==> H="bc"
 */
H = string.substr(S,Begin) :- string(S), int(Begin) |
    '$callback'('string_substr_right', S, Begin, H).

/**
 * string.substr(+Str, +Begin, +End, -Res):
 * 
 * 文字列の指定された開始位置から終了位置までの部分文字列を返す。
 * @param +Str 元の文字列
 * @param +Begin 開始位置
 * @param +End 終了位置
 * @param -Res 結果(エラー時は空文字列)
 * @example H=string.substr("abc", 1, 2) ==> H="b"
 */
H = string.substr(S,Begin,End) :- string(S), int(Begin), int(End) |
    '$callback'('string_substr', S, Begin, End, H).

/**
 * str.length(+Str, -Length):
 *
 * 文字列を受け取って長さを返す
 * @example H=string.length("hello")  ==>  H=5
 */
//2007.07.02 inui
H = string.length(Str) :- string(Str) | '$callback'('string_length', Str, H).
	
/**
 * string.reverse(+Str, -ReversedStr):
 *
 * 文字列を受け取って反転させた文字列を返す
 * @example H=string.length("hello")  ==>  H="olleh"
 */
//2007.07.02 inui
H = string.reverse(Str) :- string(Str) | '$callback'('string_reverse', Str, H).

/**
 * string.compress(+List, -String)
 *
 * 文字コードのリストを文字列に変換
 * @example H=string.compress([65,66,67]) ==> H="ABC"
 */

S = string.compress(L) :- 
  S = string.compress(L, io.open_output_string).
        
S = string.compress([], O0) :-
  S = io.output_string(O0,O), io.free_port(O).
S = string.compress([C|Cs], O0) :-
  io.print_byte(O0, C, O),
  S = string.compress(Cs, O).

/**
 * string.explode(+String, -List)
 *
 * 文字列を文字コードのリストに変換
 * @example H=string.explode("ABCDE") ==> H=[65,66,67,68,69]
 */

L = string.explode(S) :- 
  io.read_byte(io.open_input_string(S), I, C),
  L = string.explode(C, I).

L = string.explode(C, I) :- C =:= -1 | io.free_port(I), L = [].
L0 = string.explode(C0, I0) :- C0 =\= -1 |
  L0 = [C0|L], 
  io.read_byte(I0, I, C), 
  L = string.explode(C, I).

/**
 * string.times(+Str, +Times, -Res)
 *
 * 与えられた文字列を指定回数繰り返し連結した文字列を返します。
 * @param +Str 繰り返す文字列
 * @param +Times 繰り返す回数
 * @param -Res 結果(文字列)
 * @example r=string.times("ab", 5)  ==>  r="ababababab"
 */
Ret = string.times($str, $n) :- string($str), $n >= 0 |
    Ret = string.times_sub($str, $n, "").

Ret = string.times_sub($str, $n, Str1) :-
    string($str), $n > 0, $n1 = $n - 1 |
    Ret = string.times_sub($str, $n1, string.concat($str, Str1)).

Ret = string.times_sub($str, $n, Str1) :-
    string($str), $n == 0 | Ret = Str1.

/**
 * string.join(+Glue, +StrList, -Res):
 *
 * 与えられた文字列のリストを指定された結合子で結合した文字列を返す。 
 * @param +Glue 結合子
 * @param +StrList 文字列のリスト
 * @param -Res 結果(文字列)
 * @example H=join("_", ["1","2","3"])  ==>  H="1_2_3"
 */
S = string.join(Glue, []) :- string(Glue) | S = "". //2006.07.24 inui
S = string.join(Glue, [A]) :- string(Glue) | S = A.
S = string.join(Glue, [A,B|X]) :- string(Glue) |
    S = string.concat(A, string.concat(Glue, string.join(Glue, [B|X]))).


/**
 * string.replace(+Str, +SubStr, +ReplacementStr, -Ret)
 * 
 * 文字列Str中の全てのSubStrをReplacementStrで置き換える
 * @param +Str 元の文字列
 * @param +SubStr 置き換えたい文字列
 * @param +ReplacementStr 置き換え後の文字列
 * @param -Res 結果(文字列)
 */
Ret = string.replace(S, Sub, Rep) :- string(S), string(Sub), string(Rep) |
    '$callback'('string_replace', S, Sub, Rep, Ret).

/**
 * string.split(+Str, +Separator, -StrList)
 * 
 * 文字列Strを分割してStrListに格納する。分割箇所は文字列Separatorで決定する。
 * @param +Str 元の文字列
 * @param +Separator セパレータ。空文字の場合1文字ずつ分割される。
 * @param -StrList 結果(文字列のリスト)
 */
Ret = string.split(S, Sep) :- string(S), string(Sep) |
    '$callback'('string_split', S, Sep, Ret).

}.
